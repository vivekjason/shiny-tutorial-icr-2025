---
title: "Shiny Tutorials — Day 2 (delta-only)"
subtitle: "Continue from Day 1; make these small changes"
format:
  html:
    toc: true
    toc-location: right
    toc-depth: 2
    number-sections: false
    code-copy: true
    code-fold: false
    smooth-scroll: false
freeze: true
execute:
  echo: false
---

# 1) Risk box (explicit calculation, single output)

**Matches:** Demo 1 (valueBox explicit)
**Goal.** Show the **predicted CVD risk** as a percentage using the full D\:A\:D formula computed **inside** `renderValueBox()`.

### Do this

* **Sidebar**

  * Use **radio buttons** for categorical inputs:

    * `select_sex` (Male=1, Female=0)
    * `select_smk_curr` (Yes/No), `select_smk_ex` (Yes/No)
  * Keep **selects** for `select_dm` (Diabetes) and `select_fhx` (Family history).
  * Make **age** a **slider** `select_age` (18–100).
  * Keep **numeric** for SBP, Total Chol, HDL, CD4.
* **Body**

  * Add a `box(title="Predicted Risk", ...)` with `valueBoxOutput("risk_box")`.
  * (Optional) Add `verbatimTextOutput("risk_text")` above for a simple text readout.
* **Server**

  * Implement **one output only** for now:
    `output$risk_box <- renderValueBox({ read inputs → compute risk → percent → color by threshold → valueBox(...) })`.
  * Keep the **entire formula inline** here (no helpers yet).

**Why:** This keeps the calculation visible for teaching and proves the output pipeline.

**Refs:** Value boxes [https://rstudio.github.io/shinydashboard/structure.html#value-boxes](https://rstudio.github.io/shinydashboard/structure.html#value-boxes) • Render functions [https://shiny.posit.co/r/reference/shiny/latest/](https://shiny.posit.co/r/reference/shiny/latest/) • Widgets gallery [https://shiny.posit.co/r/gallery/widgets/](https://shiny.posit.co/r/gallery/widgets/)

---

# 2) Consolidate with a `reactive()` (single source of truth)

**Matches:** Demo 2 (unify via reactive)
**Goal.** Compute the numeric risk **once** in a `reactive()` and **reuse** it.

### Do this

* **Server**

  * Add `risk_val <- reactive({ /* read select_* inputs; compute and return risk in [0,1] */ })`.
  * Update the risk box to use `pct <- round(100 * risk_val(), 1)`.
  * Add interpretation line: `output$risk_text <- renderText({ /* threshold on pct */ })`.
* **Body**

  * If not present yet, add `textOutput("risk_text")` right under the risk box.

**Why:** Avoids duplication and shows how multiple outputs can depend on the same calculation.

**Refs:** Reactivity overview [https://shiny.posit.co/r/articles/build/reactivity-overview/](https://shiny.posit.co/r/articles/build/reactivity-overview/) • Mastering Shiny (Reactivity) [https://mastering-shiny.org/reactivity-basics.html](https://mastering-shiny.org/reactivity-basics.html)

---

# 3) Built-in theming + tiny CSS (optional)

**Matches:** Demo 3 (skin + minimal CSS)
**Goal.** Use **shinydashboard** skins first; add only **tiny** CSS.

### Do this

* **UI**

  * In `dashboardPage()`, set `skin = "green"` (try a few).
  * In the risk box, add `status = "primary"` and `solidHeader = TRUE`.
  * Make the header fit: `dashboardHeader(titleWidth = 270)` (adjust as needed).
* **Body head**

  * (Optional) Add tiny CSS:
    `tags$head(tags$style(HTML(".small-muted{font-size:90%;color:#555}")))`
  * Use it on a one-line model note under the outputs.

**Why:** Consistent color without diving into custom CSS.

**Refs:** Appearance/skins [https://rstudio.github.io/shinydashboard/appearance.html](https://rstudio.github.io/shinydashboard/appearance.html) • Layout guide [https://shiny.posit.co/r/articles/build/layout-guide/](https://shiny.posit.co/r/articles/build/layout-guide/)

---

# 4) “Estimate risk” button + CSV download

**Matches:** Demo 4 (eventReactive + download)
**Goal.** Compute **only when clicked** and offer a **CSV** of the current inputs (plus last risk).

### Do this

* **Sidebar**

  * Add `actionButton("estimate", "Estimate risk", icon = icon("play"))`.
* **Server**

  * Change `risk_val <- reactive({...})` to
    `risk_val <- eventReactive(input$estimate, { /* compute risk */ }, ignoreInit = TRUE)`.
  * Show a placeholder in the risk box **before first click** (e.g., “—” with info icon).
  * Add `downloadHandler` to export a **1-row CSV** with all **current** `select_*` inputs and the last `risk_pct`.
* **Body**

  * Add `downloadButton("dl_inputs", "Download current inputs (CSV)")` below the outputs.

**Why:** Great for teaching “compute on demand” and reproducible exports.

**Refs:** `eventReactive` [https://shiny.posit.co/r/reference/shiny/latest/eventReactive.html](https://shiny.posit.co/r/reference/shiny/latest/eventReactive.html) • Downloads [https://shiny.posit.co/r/articles/build/download.html](https://shiny.posit.co/r/articles/build/download.html)

---

# 5) Tabs + Plotly + DT

**Matches:** Demo 5 (tabs + plotly + datatable)
**Goal.** Add tabs (“Risk” and “Explore”). Keep the calculator; show a chart and a table.

### Do this

* **Sidebar**

  * Wrap controls in `sidebarMenu(id="tabs", menuItem("Risk Calculator", tabName="risk", icon=icon("heartbeat")), menuItem("Explore (Static)", tabName="explore", icon=icon("chart-line")))`.
  * Keep inputs visible below the menu.
* **Body**

  * Add `tabItems()` with `tabItem(tabName="risk", ...)` and `tabItem(tabName="explore", ...)`.
  * Move the **risk box + interpretation** into `"risk"`.
  * In `"explore"`:

    * Box 1: `plotlyOutput("p1")` (age vs SBP scatter).
    * Box 2: `plotlyOutput("p2")` (smoking counts).
    * Box 3: `DTOutput("tbl")` (full dataset).
* **Server**

  * `p1`: simple ggplot scatter → `ggplotly()`.
  * `p2`: derive “Current/Ex/Never” from your smoking flags and plot bars → `ggplotly()`.
  * `tbl`: `datatable(df, options = list(pageLength = 10, scrollX = TRUE))`.

**Note on IDs:** Demo 5 uses `rc_*` IDs to mirror the final app. If you keep your `select_*` IDs, just use them consistently (or rename once).

**Refs:** Plotly R [https://plotly.com/r/](https://plotly.com/r/) • DT docs [https://rstudio.github.io/DT/](https://rstudio.github.io/DT/) • shinydashboard structure [https://rstudio.github.io/shinydashboard/](https://rstudio.github.io/shinydashboard/)

---

# 6) Deployment: minimal one-page (Shinylive & shinyapps.io)

**Matches:** Demo 6 (minimal deployable)
**Goal.** Strip back to the **minimal one-page** risk calculator for hosting.

### Do this

* **Keep only**: `shiny`, `shinydashboard`, plus what `cleaning.R` needs (`readr`, `dplyr`, `tidyr`).
* **One page**: sidebar with the 9 inputs; body with one `box` containing:

  * `valueBoxOutput("risk_box")`
  * `textOutput("risk_text")`
* **Compute twice** (value box + text) **explicitly** for teaching clarity.
* **No tabs/plotly/DT** here.
* **Shinylive:** ensure `cleaning.R` is **CSV-first**; bundle with r-shinylive workflow.
* **shinyapps.io:** `rsconnect::deployApp()` after login.

**Refs:** Shinylive [https://github.com/posit-dev/r-shinylive](https://github.com/posit-dev/r-shinylive) • shinyapps.io intro [https://docs.posit.co/shinyapps.io/getting\_started/](https://docs.posit.co/shinyapps.io/getting_started/)

---

## Quick guardrails for learners

* **Consistent IDs:** If you start with `select_*`, stick with it (or rename once to `rc_*` when moving to the tabbed version).
* **Numeric safety:** Coerce inputs and keep sensible mins for any `log(...)` terms (e.g., HDL > 0).
* **Thresholds:** Document the red/yellow/green cutoffs near the risk display for clarity.

